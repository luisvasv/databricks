-- Databricks notebook source
-- MAGIC %md 
-- MAGIC
-- MAGIC # DELTA LIVE TABLES
-- MAGIC ----
-- MAGIC
-- MAGIC * **TEMPORARY**: Create a temporary table. No metadata is persisted for this table.
-- MAGIC * **STREAMING**: Create a table that reads an input dataset as a stream. The input dataset must be a streaming data source, for example, Auto Loader or a `STREAMING` table.
-- MAGIC * **GENERATED ALWAYS AS**:  generated columns are automatically generated based on a user-specified function over other columns in the Delta table
-- MAGIC * **PARTITIONED BY**: An optional list of one or more columns to use for partitioning the table.
-- MAGIC * **LOCATION**: An optional storage location for table data. If not set, the system will default to the pipeline storage location.
-- MAGIC * **COMMENT**: An optional description for the table.
-- MAGIC * **TBLPROPERTIES**: An optional list of table properties for the table.
-- MAGIC
-- MAGIC * **CONSTRAINT**: expectations, check the notebook `training/003.delta.live.tables/001.expectations`

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ## SQL

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ### DELTA LIVE TABLES
-- MAGIC
-- MAGIC syntaxis:
-- MAGIC
-- MAGIC **TABLES**
-- MAGIC ```
-- MAGIC CREATE OR REFRESH [TEMPORARY] { STREAMING TABLE | LIVE TABLE } table_name
-- MAGIC   [(
-- MAGIC     [
-- MAGIC     col_name1 col_type1 [ GENERATED ALWAYS AS generation_expression1 ] [ COMMENT col_comment1 ],
-- MAGIC     col_name2 col_type2 [ GENERATED ALWAYS AS generation_expression2 ] [ COMMENT col_comment2 ],
-- MAGIC     col_name3 col_type3 
-- MAGIC     ...
-- MAGIC     ]
-- MAGIC     [
-- MAGIC     CONSTRAINT expectation_name_1 EXPECT (expectation_expr1) [ON VIOLATION { FAIL UPDATE | DROP ROW }],
-- MAGIC     CONSTRAINT expectation_name_2 EXPECT (expectation_expr2) [ON VIOLATION { FAIL UPDATE | DROP ROW }],
-- MAGIC     ...
-- MAGIC     ]
-- MAGIC   )]
-- MAGIC   [USING DELTA]
-- MAGIC   [PARTITIONED BY (col_name1, col_name2, ... )]
-- MAGIC   [LOCATION path]
-- MAGIC   [COMMENT table_comment]
-- MAGIC   [TBLPROPERTIES (key1 [ = ] val1, key2 [ = ] val2, ... )]
-- MAGIC   AS select_statement
-- MAGIC ```
-- MAGIC
-- MAGIC
-- MAGIC **PRE-REQUIREMENTS**: you must create a table with this requiremnents
-- MAGIC
-- MAGIC ```
-- MAGIC email_user STRING
-- MAGIC usernames STRING
-- MAGIC date_event TIMESTAMP
-- MAGIC ```

-- COMMAND ----------

CREATE OR REFRESH LIVE TABLE demo(
  email STRING COMMENT 'demo email',
  user_name STRING COMMENT 'demo user',
  event_time TIMESTAMP COMMENT 'demo event time',
  year INT GENERATED ALWAYS AS (YEAR(event_time)) COMMENT 'calculated year'
) 
PARTITIONED BY (year)
LOCATION '/mnt/demo'
COMMENT 'full table demo'
TBLPROPERTIES(
  user.owner='demo',
  app.version=1.1
)
AS
SELECT email_user, usernames, date_event FROM your_table


-- COMMAND ----------

-- MAGIC %md
-- MAGIC ### CALLING DLT

-- COMMAND ----------

-- constraints will check the sql colums generated by the query below of AS
CREATE OR REFRESH LIVE TABLE calling_demo(
  CONSTRAINT valid_email EXPECT (email_user IS NOT NULL),
  CONSTRAINT valid_user_name EXPECT (user_name IS NOT NULL) ON VIOLATION FAIL UPDATE,
  CONSTRAINT valid_date EXPECT (event_time IS NOT NULL) ON VIOLATION DROP ROW
)
COMMENT "demo calling another DTL."
AS SELECT
 email  as email_user,
  (year / 100 ) as calculated_year,
  user_name,
  event_time
FROM live.demo;

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ### DELTA LIVE VIEWS
-- MAGIC
-- MAGIC syntaxis:
-- MAGIC
-- MAGIC **VIEW**
-- MAGIC ```
-- MAGIC CREATE TEMPORARY [STREAMING] LIVE VIEW view_name
-- MAGIC   [(
-- MAGIC     [
-- MAGIC     col_name1 [ COMMENT col_comment1 ],
-- MAGIC     col_name2 [ COMMENT col_comment2 ],
-- MAGIC     ...
-- MAGIC     ]
-- MAGIC     [
-- MAGIC     CONSTRAINT expectation_name_1 EXPECT (expectation_expr1) [ON VIOLATION { FAIL UPDATE | DROP ROW }],
-- MAGIC     CONSTRAINT expectation_name_2 EXPECT (expectation_expr2) [ON VIOLATION { FAIL UPDATE | DROP ROW }],
-- MAGIC     ...
-- MAGIC     ]
-- MAGIC   )]
-- MAGIC   [COMMENT view_comment]
-- MAGIC   AS select_statement
-- MAGIC ```

-- COMMAND ----------

CREATE TEMPORARY VIEW temp_view(
)
COMMENT "DLT views"
AS 
SELECT
 *
FROM live.calling_demo;

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ## PYTHON

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ### DELTA LIVE TABLES
-- MAGIC
-- MAGIC `@dlt.table`
-- MAGIC
-- MAGIC delta live table definition
-- MAGIC
-- MAGIC Note: you can define dlt.table without argments, will take the function name
-- MAGIC ```
-- MAGIC @dlt.table
-- MAGIC def demo():
-- MAGIC   pass
-- MAGIC ```

-- COMMAND ----------

-- MAGIC %python
-- MAGIC @dlt.table(
-- MAGIC   name="<name>",
-- MAGIC   comment="<comment>",
-- MAGIC   spark_conf={"<key>" : "<value", "<key" : "<value>"},
-- MAGIC   table_properties={"<key>" : "<value>", "<key>" : "<value>"},
-- MAGIC   path="<storage-location-path>",
-- MAGIC   partition_cols=["<partition-column>", "<partition-column>"],
-- MAGIC   schema="schema-definition",
-- MAGIC   temporary=False)
-- MAGIC def demo():
-- MAGIC     pass

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ### DELTA LIVE VIEWS
-- MAGIC
-- MAGIC `@dlt.view`
-- MAGIC
-- MAGIC delta live view definition

-- COMMAND ----------

-- MAGIC %python
-- MAGIC @dlt.view(
-- MAGIC   name="<name>",
-- MAGIC   comment="<comment>")

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ## EXAMPLE
